{"ast":null,"code":"import { $authHost, $host } from \"./index\";\nimport { jwtDecode } from \"jwt-decode\";\nexport const registration = async (email, password) => {\n  const {\n    data\n  } = await $host.post('api/user/registration', {\n    email,\n    password,\n    role: 'ADMIN'\n  });\n  localStorage.setItem('token', data.token);\n  return jwtDecode(data.token);\n};\nexport const login = async (email, password) => {\n  const {\n    data\n  } = await $host.post('api/user/login', {\n    email,\n    password\n  });\n  localStorage.setItem('token', data.token);\n  return jwtDecode(data.token);\n};\nexport const check = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Token is not available');\n    }\n    const decodedToken = jwtDecode(token);\n    const currentTime = Date.now() / 1000;\n    if (decodedToken.exp < currentTime) {\n      throw new Error('Token has expired');\n    }\n    const {\n      data\n    } = await $authHost.get('api/user/auth');\n    const userData = {\n      token: data.token,\n      userId: decodedToken.id,\n      email: decodedToken.email,\n      role: decodedToken.role,\n      ru1: decodedToken.ru1,\n      ru2: decodedToken.ru2,\n      ru3: decodedToken.ru3,\n      eu1: decodedToken.eu1,\n      us1: decodedToken.us1\n    };\n    localStorage.setItem('token', userData.token);\n    return userData;\n  } catch (error) {\n    console.error('Authentication check failed:', error);\n    return null;\n  }\n};\nexport const changePassword = async (currentPassword, newPassword) => {\n  const {\n    data\n  } = await $authHost.post('/api/user/change-password', {\n    currentPassword,\n    newPassword\n  });\n  return data;\n};\nexport const updateNickname = async (userId, nicknames) => {\n  try {\n    await $authHost.put('api/user/nicknames', {\n      userId,\n      nicknames\n    });\n  } catch (error) {\n    console.error('Ошибка при обновлении никнейма:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["$authHost","$host","jwtDecode","registration","email","password","data","post","role","localStorage","setItem","token","login","check","getItem","Error","decodedToken","currentTime","Date","now","exp","get","userData","userId","id","ru1","ru2","ru3","eu1","us1","error","console","changePassword","currentPassword","newPassword","updateNickname","nicknames","put"],"sources":["C:/so-market_diplom_info/market-site/src1/somarket/src/http/userAPI.js"],"sourcesContent":["import { $authHost, $host } from \"./index\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\n\r\nexport const registration = async (email, password) => {\r\n    const {data} = await $host.post('api/user/registration', {email, password, role: 'ADMIN'});\r\n    localStorage.setItem('token', data.token);\r\n    return jwtDecode(data.token);\r\n};\r\n\r\nexport const login = async (email, password) => {\r\n    const {data} = await $host.post('api/user/login', {email, password});\r\n    localStorage.setItem('token', data.token);\r\n    return jwtDecode(data.token);\r\n};\r\n\r\nexport const check = async () => {\r\n    try {\r\n        const token = localStorage.getItem('token');\r\n\r\n        if (!token) {\r\n            throw new Error('Token is not available');\r\n        }\r\n\r\n        const decodedToken = jwtDecode(token);\r\n        const currentTime = Date.now() / 1000;\r\n\r\n        if (decodedToken.exp < currentTime) {\r\n            throw new Error('Token has expired');\r\n        }\r\n\r\n        const { data } = await $authHost.get('api/user/auth');\r\n\r\n        const userData = {\r\n            token: data.token,\r\n            userId: decodedToken.id,\r\n            email: decodedToken.email,\r\n            role: decodedToken.role,\r\n            ru1: decodedToken.ru1,\r\n            ru2: decodedToken.ru2,\r\n            ru3: decodedToken.ru3,\r\n            eu1: decodedToken.eu1,\r\n            us1: decodedToken.us1,\r\n        };\r\n\r\n        localStorage.setItem('token', userData.token);\r\n        return userData;\r\n    } catch (error) {\r\n        console.error('Authentication check failed:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const changePassword = async (currentPassword, newPassword) => {\r\n    const {data} = await $authHost.post('/api/user/change-password', { currentPassword, newPassword });\r\n    return data;\r\n};\r\n\r\nexport const updateNickname = async (userId, nicknames) => {\r\n    try {\r\n        await $authHost.put('api/user/nicknames', { userId, nicknames });\r\n    } catch (error) {\r\n        console.error('Ошибка при обновлении никнейма:', error);\r\n        throw error;\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}